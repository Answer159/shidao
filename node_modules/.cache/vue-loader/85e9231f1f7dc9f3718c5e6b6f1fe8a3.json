{"remainingRequest":"D:\\DownLoad\\shidao-vue-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\DownLoad\\shidao-vue-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\DownLoad\\shidao-vue-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DownLoad\\shidao-vue-master\\src\\components\\contant\\order\\OrderDetail.vue?vue&type=template&id=3f14a838&scoped=true&","dependencies":[{"path":"D:\\DownLoad\\shidao-vue-master\\src\\components\\contant\\order\\OrderDetail.vue","mtime":1650171831984},{"path":"D:\\DownLoad\\shidao-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649392170894},{"path":"D:\\DownLoad\\shidao-vue-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1649392175185},{"path":"D:\\DownLoad\\shidao-vue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1649392170894},{"path":"D:\\DownLoad\\shidao-vue-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1649392173647}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}